// Generated by Dagger (https://dagger.dev).
package com.motionapps.sensorbox;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.motionapps.countdowndialog.CountDownMain;
import com.motionapps.sensorbox.activities.MainActivity;
import com.motionapps.sensorbox.activities.MeasurementActivity;
import com.motionapps.sensorbox.di.GpsModule_ProvideGPSHandlerFactory;
import com.motionapps.sensorbox.di.GpsModule_ProvidesGPSDisplayerFactory;
import com.motionapps.sensorbox.di.MainRepositoryModule_GetCountDownDialogFactory;
import com.motionapps.sensorbox.di.MainRepositoryModule_GetMainRepositoryFactory;
import com.motionapps.sensorbox.di.MainRepositoryModule_GetWearOsHandlerFactory;
import com.motionapps.sensorbox.di.MeasurementRepositoryModule_GetMeasurementRepositoryFactory;
import com.motionapps.sensorbox.fragments.HomeFragment;
import com.motionapps.sensorbox.fragments.InfoSensorFragment;
import com.motionapps.sensorbox.fragments.InfoSensorFragmentWearOs;
import com.motionapps.sensorbox.fragments.InfoSensorFragment_MembersInjector;
import com.motionapps.sensorbox.fragments.advanced.ExtraFragment;
import com.motionapps.sensorbox.fragments.displayers.GPSDisplayer;
import com.motionapps.sensorbox.fragments.displayers.SensorDisplayer;
import com.motionapps.sensorbox.uiHandlers.GraphUpdater;
import com.motionapps.sensorbox.viewmodels.MainRepository;
import com.motionapps.sensorbox.viewmodels.MainViewModel;
import com.motionapps.sensorbox.viewmodels.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.motionapps.sensorbox.viewmodels.MeasurementRepository;
import com.motionapps.sensorbox.viewmodels.MeasurementViewModel;
import com.motionapps.sensorbox.viewmodels.MeasurementViewModel_HiltModules_KeyModule_ProvideFactory;
import com.motionapps.sensorservices.handlers.GPSHandler;
import com.motionapps.wearoslib.WearOsHandler;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSensorBoxApp_HiltComponents_SingletonC extends SensorBoxApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC = this;

  private DaggerSensorBoxApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public void injectSensorBoxApp(SensorBoxApp arg0) {
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return Collections.<Boolean>emptySet();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public SensorBoxApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerSensorBoxApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements SensorBoxApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public SensorBoxApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements SensorBoxApp_HiltComponents.ActivityC.Builder {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public SensorBoxApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements SensorBoxApp_HiltComponents.FragmentC.Builder {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public SensorBoxApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements SensorBoxApp_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public SensorBoxApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements SensorBoxApp_HiltComponents.ViewC.Builder {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public SensorBoxApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements SensorBoxApp_HiltComponents.ViewModelC.Builder {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public SensorBoxApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements SensorBoxApp_HiltComponents.ServiceC.Builder {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public SensorBoxApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends SensorBoxApp_HiltComponents.ViewWithFragmentC {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends SensorBoxApp_HiltComponents.FragmentC {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private Provider<GPSHandler> provideGPSHandlerProvider;

    private Provider<GPSDisplayer> providesGPSDisplayerProvider;

    private FragmentCImpl(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;

      initialize(fragmentParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final Fragment fragmentParam) {
      this.provideGPSHandlerProvider = DoubleCheck.provider(new SwitchingProvider<GPSHandler>(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, 1));
      this.providesGPSDisplayerProvider = DoubleCheck.provider(new SwitchingProvider<GPSDisplayer>(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, 0));
    }

    @Override
    public void injectHomeFragment(HomeFragment arg0) {
    }

    @Override
    public void injectInfoSensorFragmentWearOs(InfoSensorFragmentWearOs arg0) {
    }

    @Override
    public void injectInfoSensorFragment(InfoSensorFragment arg0) {
      injectInfoSensorFragment2(arg0);
    }

    @Override
    public void injectExtraFragment(ExtraFragment arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private InfoSensorFragment injectInfoSensorFragment2(InfoSensorFragment instance) {
      InfoSensorFragment_MembersInjector.injectGpsDisplayer(instance, providesGPSDisplayerProvider.get());
      InfoSensorFragment_MembersInjector.injectSensorDisplayer(instance, new SensorDisplayer());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl;

      private final FragmentCImpl fragmentCImpl;

      private final int id;

      SwitchingProvider(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
          FragmentCImpl fragmentCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.activityCImpl = activityCImpl;
        this.fragmentCImpl = fragmentCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.motionapps.sensorbox.fragments.displayers.GPSDisplayer 
          return (T) GpsModule_ProvidesGPSDisplayerFactory.providesGPSDisplayer(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), fragmentCImpl.provideGPSHandlerProvider.get());

          case 1: // com.motionapps.sensorservices.handlers.GPSHandler 
          return (T) GpsModule_ProvideGPSHandlerFactory.provideGPSHandler();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ViewCImpl extends SensorBoxApp_HiltComponents.ViewC {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends SensorBoxApp_HiltComponents.ActivityC {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
    }

    @Override
    public void injectMeasurementActivity(MeasurementActivity arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(2).add(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MeasurementViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends SensorBoxApp_HiltComponents.ViewModelC {
    private final SavedStateHandle savedStateHandle;

    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<MeasurementViewModel> measurementViewModelProvider;

    private ViewModelCImpl(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.savedStateHandle = savedStateHandleParam;
      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.mainViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.measurementViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(2).put("com.motionapps.sensorbox.viewmodels.MainViewModel", ((Provider) mainViewModelProvider)).put("com.motionapps.sensorbox.viewmodels.MeasurementViewModel", ((Provider) measurementViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.motionapps.sensorbox.viewmodels.MainViewModel 
          return (T) new MainViewModel(activityRetainedCImpl.getMainRepositoryProvider.get());

          case 1: // com.motionapps.sensorbox.viewmodels.MeasurementViewModel 
          return (T) new MeasurementViewModel(activityRetainedCImpl.getMeasurementRepositoryProvider.get(), viewModelCImpl.savedStateHandle);

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends SensorBoxApp_HiltComponents.ActivityRetainedC {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private Provider<CountDownMain> getCountDownDialogProvider;

    private Provider<WearOsHandler> getWearOsHandlerProvider;

    private Provider<MainRepository> getMainRepositoryProvider;

    private Provider<GraphUpdater> graphUpdaterProvider;

    private Provider<MeasurementRepository> getMeasurementRepositoryProvider;

    private ActivityRetainedCImpl(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
      this.getCountDownDialogProvider = DoubleCheck.provider(new SwitchingProvider<CountDownMain>(singletonC, activityRetainedCImpl, 2));
      this.getWearOsHandlerProvider = DoubleCheck.provider(new SwitchingProvider<WearOsHandler>(singletonC, activityRetainedCImpl, 3));
      this.getMainRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<MainRepository>(singletonC, activityRetainedCImpl, 1));
      this.graphUpdaterProvider = DoubleCheck.provider(new SwitchingProvider<GraphUpdater>(singletonC, activityRetainedCImpl, 5));
      this.getMeasurementRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<MeasurementRepository>(singletonC, activityRetainedCImpl, 4));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          case 1: // com.motionapps.sensorbox.viewmodels.MainRepository 
          return (T) MainRepositoryModule_GetMainRepositoryFactory.getMainRepository(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), activityRetainedCImpl.getCountDownDialogProvider.get(), activityRetainedCImpl.getWearOsHandlerProvider.get());

          case 2: // com.motionapps.countdowndialog.CountDownMain 
          return (T) MainRepositoryModule_GetCountDownDialogFactory.getCountDownDialog(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

          case 3: // com.motionapps.wearoslib.WearOsHandler 
          return (T) MainRepositoryModule_GetWearOsHandlerFactory.getWearOsHandler();

          case 4: // com.motionapps.sensorbox.viewmodels.MeasurementRepository 
          return (T) MeasurementRepositoryModule_GetMeasurementRepositoryFactory.getMeasurementRepository(activityRetainedCImpl.getCountDownDialogProvider.get(), activityRetainedCImpl.graphUpdaterProvider.get(), activityRetainedCImpl.getWearOsHandlerProvider.get());

          case 5: // com.motionapps.sensorbox.uiHandlers.GraphUpdater 
          return (T) new GraphUpdater();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends SensorBoxApp_HiltComponents.ServiceC {
    private final DaggerSensorBoxApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerSensorBoxApp_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
