// Generated by Dagger (https://dagger.dev).
package com.motionapps.sensorbox.di;

import com.motionapps.countdowndialog.CountDownMain;
import com.motionapps.sensorbox.uiHandlers.GraphUpdater;
import com.motionapps.sensorbox.viewmodels.MeasurementRepository;
import com.motionapps.wearoslib.WearOsHandler;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("dagger.hilt.android.scopes.ActivityRetainedScoped")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MeasurementRepositoryModule_GetMeasurementRepositoryFactory implements Factory<MeasurementRepository> {
  private final Provider<CountDownMain> countDownMainProvider;

  private final Provider<GraphUpdater> graphUpdaterProvider;

  private final Provider<WearOsHandler> wearOsHandlerProvider;

  public MeasurementRepositoryModule_GetMeasurementRepositoryFactory(
      Provider<CountDownMain> countDownMainProvider, Provider<GraphUpdater> graphUpdaterProvider,
      Provider<WearOsHandler> wearOsHandlerProvider) {
    this.countDownMainProvider = countDownMainProvider;
    this.graphUpdaterProvider = graphUpdaterProvider;
    this.wearOsHandlerProvider = wearOsHandlerProvider;
  }

  @Override
  public MeasurementRepository get() {
    return getMeasurementRepository(countDownMainProvider.get(), graphUpdaterProvider.get(), wearOsHandlerProvider.get());
  }

  public static MeasurementRepositoryModule_GetMeasurementRepositoryFactory create(
      Provider<CountDownMain> countDownMainProvider, Provider<GraphUpdater> graphUpdaterProvider,
      Provider<WearOsHandler> wearOsHandlerProvider) {
    return new MeasurementRepositoryModule_GetMeasurementRepositoryFactory(countDownMainProvider, graphUpdaterProvider, wearOsHandlerProvider);
  }

  public static MeasurementRepository getMeasurementRepository(CountDownMain countDownMain,
      GraphUpdater graphUpdater, WearOsHandler wearOsHandler) {
    return Preconditions.checkNotNullFromProvides(MeasurementRepositoryModule.INSTANCE.getMeasurementRepository(countDownMain, graphUpdater, wearOsHandler));
  }
}
